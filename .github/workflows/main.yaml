name: Run Deploy (Production)

on:
  push:
    branches: [main]
    paths: ["apps/api/**", "apps/api/**", ".github/workflows/**"]

env:
  ENV_API: ${{ vars.ENV }}
  HOST: ${{ vars.HOST }}
  USER: ${{ vars.USER }}
  SERVER_DIRECTORY: ${{ vars.SERVER_DIRECTORY }}
  API_IMAGE_NAME: "filmania-api"

jobs:
  server-setup:
    name: "Setup Server"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SECRET }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ env.HOST }} >> ~/.ssh/known_hosts
      - name: Connect with server
        run: |
          ssh -o ControlPersist=3600 ${{ env.USER }}@${{ env.HOST }}
      - name: Configure Deploy Directory
        run: |
          ssh ${{ env.USER }}@${{ env.HOST }} "mkdir -p ${{ env.SERVER_DIRECTORY }}"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && rm -rf .env.api docker-compose.yaml images scripts"
          ssh ${{ env.USER }}@${{ env.HOST }} "mkdir -p ${{ env.SERVER_DIRECTORY }}/scripts/api"
          ssh ${{ env.USER }}@${{ env.HOST }} "mkdir -p ${{ env.SERVER_DIRECTORY }}/images"
      - name: Send Scripts
        run: |
          scp docker-compose.yaml ${{ env.USER }}@${{ env.HOST }}:${{ env.SERVER_DIRECTORY }}
          scp -r apps/api/scripts/production/* ${{ env.USER }}@${{ env.HOST }}:${{ env.SERVER_DIRECTORY }}/scripts/api
      - name: Setup VPS and NGINX
        run: |
          ssh ${{ env.USER }}@${{ env.HOST }} "bash ${{ env.SERVER_DIRECTORY }}/scripts/api/server/setup-vps.bash"
          ssh ${{ env.USER }}@${{ env.HOST }} "bash ${{ env.SERVER_DIRECTORY }}/scripts/api/server/setup-nginx.bash"

  deploy-api:
    name: "Build API"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Image
        run: |
          echo "${{ env.ENV_API }}" > apps/api/.env
          docker compose -f docker-compose.build.yaml build api
      - name: Export images to TAR
        run: |
          mkdir -p exported_images
          docker save ${{ env.API_IMAGE_NAME }}:latest -o exported_images/api.tar
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SECRET }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ env.HOST }} >> ~/.ssh/known_hosts
      - name: Upload Image
        run: |
          scp exported_images/api.tar ${{ env.USER }}@${{ env.HOST }}:${{ env.SERVER_DIRECTORY }}/images/api.tar
          # ssh ${{ env.USER }}@${{ env.HOST }} "docker system prune -f"

  up:
    name: "Docker UP"
    runs-on: ubuntu-latest
    needs: [deploy-api, server-setup]
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_SECRET }}" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          ssh-keyscan -t rsa ${{ env.HOST }} >> ~/.ssh/known_hosts
      - name: Configure Env
        run: |
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && echo '${{ env.ENV_API }}' > .env.api"
      - name: Run Docker Compose UP
        run: |
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && docker load -i images/api.tar"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && docker compose up -d --remove-orphans"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && service nginx restart"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && service nginx reload"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && sleep 10"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && docker compose logs api"
          ssh ${{ env.USER }}@${{ env.HOST }} "cd ${{ env.SERVER_DIRECTORY }} && docker compose ps"
          ssh ${{ env.USER }}@${{ env.HOST }} "docker system prune -f"
